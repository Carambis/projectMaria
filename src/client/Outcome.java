package client;

import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

//import static client.Auth.executeSql;

public class Outcome extends JFrame {
    private static String tableName = "outcome";
    private JTable jTable1;
    private int userId;
    private int userRole;
    private String[][] data;

    public Outcome() throws IOException {
        initComponents();

        userId = GlobalVariable.getUserId();
        userRole = GlobalVariable.getUserRole();

        loadData();

        refreshTable();
    }

    public void loadData() throws IOException {
        Price price = new Price();

        for (String[] item : price.getData()) {
            priceSelector.add(item[1]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jButton1 = new JButton();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jButton4 = new JButton();
        jButton5 = new JButton();
        priceSelector = new Choice();
        filtrFrom = new JTextField();
        filtrTo = new JTextField();

        setTitle("Расходы");

        jTable1.setModel(new DefaultTableModel());
        jTable1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jTable1.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Добавить");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        jLabel1.setText("Товар/услуга");
        jLabel2.setText("С");
        jLabel3.setText("По");


        jButton2.setForeground(new Color(255, 51, 51));
        jButton2.setText("Удалить");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jButton2ActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        jButton3.setForeground(new Color(255, 153, 51));
        jButton3.setText("Фильтрация");
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setForeground(new Color(22, 17, 255));
        jButton4.setText("Экспорт в файл");
        jButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("График");
        jButton5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        filtrTo.setToolTipText("Установка даты для фильтрации в формате: dd-mm-YYYY");
        filtrFrom.setToolTipText("Установка даты для фильтрации в формате: dd-mm-YYYY");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 527, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(priceSelector, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
                                        // .addComponent(jLabel2)
                                        .addComponent(filtrFrom, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
                                        // .addComponent(jLabel3)
                                        .addComponent(filtrTo, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jButton5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 7, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 369, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        //.addComponent(jLabel2)
                                        //.addComponent(jLabel3)
                                        .addComponent(priceSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(filtrFrom, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(filtrTo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5))
        );

        getContentPane().setSize(new Dimension(900, 600));
        pack();


    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(ActionEvent evt) throws IOException {//GEN-FIRST:event_jButton1ActionPerformed
        String price = priceSelector.getSelectedItem();

        if (price.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка выбора!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            int priceId = this.getPriceId(price);

            insertData(priceId, this.userId);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private int getPriceId(String name) throws IOException {
        Price price = new Price();

        for (String[] item : price.getData()) {
            if (item[1].equalsIgnoreCase(name)) {
                return Integer.parseInt(item[0]);
            }
        }

        return 0;
    }

    private void jButton2ActionPerformed(ActionEvent evt) throws IOException {//GEN-FIRST:event_jButton2ActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        String recordId = null;
        try {
            recordId = data[rowIndex][0];
            // (String) jTable1.getValueAt(rowIndex, 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка выбора записи!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        }
        //recordId = data[rowIndex][0];

        if (!isUserRecord(recordId) && userRole == 0) {
            JOptionPane.showMessageDialog(null,
                    "Не ваша запись!",
                    "Запрет удаления",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            recordId = data[rowIndex][0];
            deleteData(recordId);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean isUserRecord(String recordId) throws IOException {
        ObjectOutputStream out;
        String serverAddress = "127.0.0.1";
        Socket clientSocket = new Socket(serverAddress, 8080);

        String sql = " WHERE o.user_id = " + userId + " AND o.id = " + recordId;

        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject("get@outcome@" + sql);

            ObjectInputStream input = new ObjectInputStream(clientSocket.getInputStream());
            String[][] data = (String[][]) input.readObject();

            if (data.length > 0) {
                return true;
            }
        } catch (Exception e) {
           // System.out.println(e);
        }

        clientSocket.close();

        return false;
    }

    private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String from = filtrFrom.getText();
        String to = filtrTo.getText();

        if (from.isEmpty() || to.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка ввода!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                searchData(from, to);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            export(new File("outcome.txt"));
        } catch (IOException ex) {
            Logger.getLogger(Outcome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        TableModel model = jTable1.getModel();
        Map<String, Double> map = new HashMap<>();

        for (int i = 0; i < model.getRowCount(); i++) {
            if (data[i][5].toString().equals(userId + "")) {
                // if (model.getValueAt(i, 5).toString().equals(userId + "")) {
                String date = model.getValueAt(i, 3).toString();
                date = date.substring(3);
                double price = Double.parseDouble(model.getValueAt(i, 1).toString());

                if (map.containsKey(date)) {
                    map.put(date, map.get(date) + price);
                } else {
                    map.put(date, price);
                }
            }
        }

        BarChart bc = new BarChart();
        bc.Show(map);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void export(File file) throws IOException {
        try {
            TableModel model = jTable1.getModel();
            FileWriter fw = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                fw.write(model.getColumnName(i) + "\t");
            }

            fw.write("\r\n");

            int rows = model.getRowCount();
            int cols = model.getColumnCount();

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    if (j == 3 || j == 2) {
                        fw.write(model.getValueAt(i, j).toString() + "\t\t");
                    } else {
                        fw.write(model.getValueAt(i, j).toString() + "\t");
                    }
                }

                fw.write("\r\n");
            }

            fw.close();
        } catch (IOException e) {
           // System.out.println(e);
        }
    }

    private void searchData(String from, String to) throws IOException {
        ObjectOutputStream out;
        String serverAddress = "127.0.0.1";
        Socket clientSocket = new Socket(serverAddress, 8080);

        to += " 23:59:59";
        String sql = " WHERE o.date_create between str_to_date('" + from + "', '%d-%m-%Y')  and str_to_date('" + to + "', '%d-%m-%Y %H:%i:%s')";

        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject("get@outcome@" + sql);

            ObjectInputStream input = new ObjectInputStream(clientSocket.getInputStream());
            String[][] data = (String[][]) input.readObject();
            Object[] columns = {"Название", "Цена, р.", "Пользователь", "Дата"};

            //data = getData();
            String[][] data1 = new String[data.length][data[0].length - 1];
            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < data[i].length - 1; j++) {
                    data1[i][j] = data[i][j + 1];
                }
            }

            TableModel model = new DefaultTableModel(data1, columns) {
                public Class<?> getColumnClass(int column) {
                    return getValueAt(0, column).getClass();
                }
            };

            jTable1.setModel(model);
            TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
            jTable1.setRowSorter(sorter);
        } catch (Exception e) {
            //System.out.println(e);
        }

        clientSocket.close();
    }

    private void jTable1MousePressed(MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
    }//GEN-LAST:event_jTable1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IllegalAccessException, UnsupportedLookAndFeelException, InstantiationException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Outcome.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Outcome().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Outcome.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void refreshTable() throws IOException {
        Object[] column = {"Название", "Цена, р.", "Пользователь", "Дата"};

        //String[][] data = getData();
        data = getData();
        String[][] data1 = new String[data.length][data[0].length - 1];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[i].length - 1; j++) {
                data1[i][j] = data[i][j + 1];
            }
        }
        DefaultTableModel model = new DefaultTableModel(data1, column);
        jTable1.setModel(model);

//        jTable1.getColumn("id").setWidth(0);
//        jTable1.getColumn("id").setMinWidth(0);
        //       jTable1.getColumn("id").setMaxWidth(0);
    }

    private String[][] getData() throws IOException {
        return getAll();
    }

    @Nullable
    private static String[][] getAll() throws IOException {
        ObjectOutputStream out;
        String serverAddress = "127.0.0.1";
        Socket clientSocket = new Socket(serverAddress, 8080);

        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject("get@" + tableName + "@no_sql");

            ObjectInputStream input = new ObjectInputStream(clientSocket.getInputStream());

            return (String[][]) input.readObject();
        } catch (Exception e) {
           // System.out.println(e);
        }

        clientSocket.close();

        return null;
    }

    private void insertData(int priceId, int userId) {
        try {
            String sql = "INSERT INTO " + tableName + " (price_id, user_id) " +
                    "VALUES ('" + priceId + "', '" + userId + "')";
            Auth.executeSql(sql, "insert");

            refreshTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void deleteData(String id) {
        try {
            String sql = "DELETE FROM " + tableName + " WHERE id = '" + id + "'";
            Auth.executeSql(sql, "delete");

            refreshTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JButton jButton4;
    private JButton jButton5;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JScrollPane jScrollPane1;
    private JPanel panel2;
    private Choice priceSelector;
    private JTextField filtrFrom;
    private JTextField filtrTo;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setEnabled(true);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel2;
    }

    // End of variables declaration//GEN-END:variables
}