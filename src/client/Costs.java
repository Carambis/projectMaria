package client;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
//import static client.Auth.executeSql;

public class Costs extends JFrame {
    private static String tableName = "costs";
    private JTable jTable1;
    private int userId;
    private String[][] data;

    public Costs() throws IOException {
        initComponents();

        userId = GlobalVariable.getUserId();

        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jButton1 = new JButton();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        textIncome = new JTextField();
        textPercent = new JTextField();
        jButton2 = new JButton();
        jButton3 = new JButton();

        setTitle("Затраты");

        jTable1.setModel(new DefaultTableModel());
        jTable1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jTable1.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Добавить");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Доход");
        jLabel2.setText("Процент");

        jButton2.setForeground(new Color(255, 51, 51));
        jButton2.setText("Удалить");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setForeground(new Color(255, 153, 51));
        jButton3.setText("Изменить");
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 527, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(textIncome, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textPercent, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jButton3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 7, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 369, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(textIncome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(textPercent, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String income = textIncome.getText();
        String percent = textPercent.getText();

        if (income.isEmpty() || percent.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка ввода!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                Double.parseDouble(income);
                Double.parseDouble(percent);
                insertData(income, percent);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Ошибка ввода!",
                        "Ошибка",
                        JOptionPane.ERROR_MESSAGE);
            }
            //insertData(income, percent);
        }

        textIncome.setText("");
        textPercent.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        String recordId = null;

        try {
            recordId = (String) jTable1.getValueAt(rowIndex, 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка выбора записи!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        }
        recordId = data[rowIndex][0];
        deleteData(recordId);

        textIncome.setText("");
        textPercent.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        String recordId = null;

        try {
            recordId = data[rowIndex][0];
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка выбора записи!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        }

        String income = textIncome.getText();
        String percent = textPercent.getText();

        if (income.isEmpty() || percent.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Ошибка ввода!",
                    "Ошибка",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                Double.parseDouble(income);
                Double.parseDouble(percent);
                updateData(income, percent, recordId);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Ошибка ввода!",
                        "Ошибка",
                        JOptionPane.ERROR_MESSAGE);
            }
            //updateData(income, percent, recordId);
        }

        textIncome.setText("");
        textPercent.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1MousePressed(MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        int rowIndex = jTable1.getSelectedRow();
        textIncome.setText((String) jTable1.getValueAt(rowIndex, 0));
        textPercent.setText((String) jTable1.getValueAt(rowIndex, 1));
    }//GEN-LAST:event_jTable1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IllegalAccessException, UnsupportedLookAndFeelException, InstantiationException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Costs.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Costs().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Costs.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void refreshTable() throws IOException {
        Object[] column = {"Доход, р.", "Процент, %", "Результат, р.", "Пользователь"};
       // String[][] data = getData();
        data = getData();
        String[][] data1 = new String[data.length][data[0].length - 1];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[i].length - 1; j++) {
                data1[i][j] = data[i][j + 1];
            }
        }
        DefaultTableModel model = new DefaultTableModel(data1, column);
        jTable1.setModel(model);
    }

    private String[][] getData() throws IOException {
        return getAll();
    }

    private static String[][] getAll() throws IOException {
        ObjectOutputStream out;
        String serverAddress = "127.0.0.1";
        Socket clientSocket = new Socket(serverAddress, 8080);

        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject("get@" + tableName + "@no_sql");

            ObjectInputStream input = new ObjectInputStream(clientSocket.getInputStream());

            return (String[][]) input.readObject();
        } catch (Exception e) {
           // System.out.println(e);
        }

        clientSocket.close();

        return null;
    }

    private void insertData(String income, String percent) {
        try {
            float result = Float.parseFloat(income) * (Float.parseFloat(percent) / 100);

            String sql = "INSERT INTO " + tableName + " (income, percent, result, user_id) " +
                    "VALUES ('" + income + "', '" + percent + "', '" + result + "', '" + this.userId + "')";
            Auth.executeSql(sql, "insert");

            refreshTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void deleteData(String id) {
        try {
            String sql = "DELETE FROM " + tableName + " WHERE id = '" + id + "'";
            Auth.executeSql(sql, "delete");

            refreshTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateData(String income, String percent, String id) {
        try {
            float result = Float.parseFloat(income) * (Float.parseFloat(percent) / 100);

            String sql = "UPDATE " + tableName + " name SET income = '" + income + "', percent = '" + percent + "', result = '" + result + "' WHERE id = '" + id + "'";
            Auth.executeSql(sql, "delete");

            refreshTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JScrollPane jScrollPane1;
    private JTextField textIncome;
    private JTextField textPercent;
    private JPanel panel2;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setEnabled(true);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel2;
    }

    // End of variables declaration//GEN-END:variables
}